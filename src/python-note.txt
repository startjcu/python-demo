python的特点
  1、简洁 Simple is better than complex
  2、既有动态脚本的特性，又有面向对象的特性
  3、运行效率稍低，开发效率高，计算机性能的提升能弥补这个缺点

python的用途
  1、爬虫，搜索引擎
  2、大数据与数据分析（spark）
  3、自动化运维与自动化测试
  4、web开发，Flask、Django
  5、机器学习：Tensor Flow
  6、胶水语言，将其他语言制作的模块联结在一起

pythonic的写法
  交换a、b两个变量的值：a, b = b, a

python开发环境搭建
  1、下载安装包 https://www.python.org
  2、安装 勾选Add Python 3.* to Path
  3、验证 python --version/-V

python写法特点，尽量简洁
  1、句末没有;  更简洁
  2、代码块不用{}包裹 用4空格缩进体现层级
  3、引入分号:  用来表示区间和条件
  4、变量定义：变量名 = 变量值，无需指定类型，且类型可动态变化
  5、python中没有++、--和switch以及三目运算符
  6、注释：#单行注释，'''多行注释'''
  7、变量命名均用小写，不同单词间用_连接，不使用驼峰命名法

*********************************************************************

python基本数据类型
  1、number   数字      
    int       整型      1
    float     浮点型    1.0
    bool      布尔型    True、False
  2、序列
    str       字符串    ''
    list      列表      []
    tuple     元组      (1,)
    序列特性：索引、切片、in、not in、len()、min()、max()
    获得字符的ASCII码值：ord()
  3、集合类
    set       集合    {1}
    dict      字典    {1:'hello', 2:'world'}

number数字
  整型    type(1)     <class 'int'> 
  浮点型  type(1.0)   <class 'float'>
  复数型  type(27j)   <class 'complex'>
  除法    type(2/2)   <class 'float'>
  整除    type(2//2)  <class 'int'>

进制转换
  二进制    binary       0b10-2     bin()
  八进制    octal        0o10-8     oct() 
  十六进制  hexadecimal  0x10-16    hex()
  默认使用int()，将其他进制数转换成十进制数

bool布尔类型
  真  True
  假  False
  首字母要大写，将其他类型转换成bool型的方法：bool()
  空值会转换成False，如0、0.0、()、[]、{}、None

str字符串
  单行字符串    单引号''  双引号""  换行使用\
  多行字符串    三引号''' '''   行末使用\表示连续代码，即字符串内不换行
  一般使用单引号，当字符串中出现引号时，使用引号嵌套或转义字符\

转义字符
  换行符    \n    newline
  制表符    \t    table
  回车符    \r    return    光标回到行首，不同系统有不同的定义

原始字符串origin
  不对字符串中的转义字符进行转义
  print(r'\n')  print('\\n')  适用于文件夹路径

字符串运算
  相加    'hello'+'world'
  相乘    'hello'*3

字符串截取
  通过下标获得单个字符  
  正下标    'hello'[0]  'h'
  负下标    'hello'[-1] 'o' 倒数或length-1
  通过[a:b]截取下标区间[a, b)的子串，b缺省或大于length表示截取到字符串末尾

列表
  type([])    <class 'list'>
  列表截取
  通过下标截取获得的是单个元素，和元素本身类型相同；
  但是通过区间截取，获得的仍然是一个列表

元组
  type(())    <class 'tuple'>
  元组和列表的区别是元组是不可变的，无法修改元组中某个索引的值
  只有一个元素的元组的表示方式
    type((1))   <class 'int'>
    type((1,))  <class 'tuple'>
    因为括号也是一种运算符，有了逗号才能将只有一个元素的元组定义成功

集合
  type({1})   <class 'set'>
  特点
    无序，唯一
  空集合  
    len(set())    0
  差集
    {1,2,3} - {2,4}   {1, 3}
  交集
    {1,2,3} & {2,4}   {2}
  合集
    {1,2,3} | {2,4}   {1, 2, 3, 4}

字典
  type({})    <class 'dict'>
  特点
    键值对，键唯一，值可以不唯一；通过键获取值，key必须是不可变类型
  
*********************************************************************

变量
  定义方法：变量名 = 变量值(超级简洁)

变量命名规范
  1、字母、数字、下划线组成，数字不能做首个字符
  2、不能使用系统关键字和保留字
  3、严格区分大小写

值类型和引用类型
  值类型拷贝的是字面值 - 深拷贝
    int、str、tuple 不可变
  引用类型拷贝的是指针/引用/内存地址 - 浅拷贝
    list、set、dict 可变
  显示某个变量在内存中的地址的方法：id()

运算符
  1、算术运算符
    +、-、*、/、//整除、**乘方，没有自增++自减--运算符
  2、赋值运算符
    =、+=、-=、*=、/=、%=、**=、//=
  3、比较运算符
    >、>=、<、<=、==、!=，也叫关系运算符
    字符串的比较'abc'<'b'-True，相同索引位置的字符转换成ASCII码进行比较，序列比较都适用此规则
  4、逻辑运算符
    and与(且)、or或、not非
    &、|返回的是能决定整个表达式真假的那个表达式的计算结果：2 and 3 > 3 , 2 or 3 > 2；not返回的一定是bool类型
  5、成员运算符
    in、not in
    判断某一变量是否在另一变量内
    字典成员运算判断的是key是否在字典中 's' in {'s':'star'} - True
    字符串判断的是是否能通过切片获得该子串 'bc' in 'abc' - True     'ac' in 'abc' - False
  6、身份运算符
    is、is not
    ==比较两个变量的值是否相等1==1.0 - True; {1,2,3} == {2,3,1} - True
    is比较两个变量的内存地址是否相等1 is 1.0 - False; {1,2,3} is {1,2,3} - False
    isinstance('a',str)判断一个变量是否是某一种的类型；拓：isinstance('a',(str,int))
  7、位运算符
    &按位与、|按位或、^按位异或、~按位取反、<<左移动、>>右移动
    将数字转换成二进制进行运算

表达式
  表达式(Expression)是运算符(operator)和操作数(operand)所构成的序列

优先级
  先计算再判断最后赋值运算, 算术 > 关系 > 逻辑 */ > +-，not > and > or，()优先级最高

*********************************************************************

流程控制
  条件语句、循环

if-else条件语句
  if condition:
    pass
  condition表达式的值不一定必须是布尔值，其他类型会隐式通过bool()方法进行转换
  elif condition:
    pass

while循环
  while condition:
    pass
  else:
    pass
  格式化不换行输出：print('{}*{}={}\t'.format(j, i, i*j), end='')

for循环
  for item in list:
    pass
  else:
    pass
  主要用来遍历序列、集合和字典
  使用range函数生成序列
    for i in range(0, 10, step)
    步长step默认位1

break和continue
  break终止/结束/跳出所在循环，与此循环匹配的else语句也不会执行
  continue跳过此次循环的循环体剩余部分，直接进入下一次循环

*********************************************************************

组织结构
  包(文件夹 + __init__.py) > 模块(一个.py文件) > 类(包含函数、变量)

命名空间
  包名.模块名
  __init__.py模块名为包名

模块导入
  import
  只能导入模块，不能导入变量
  from module import variable
  一行导入文件过多换行：1、\，2、()
  包和模块不会被重复导入，避免循环导入
  导入一个模块时，被导入的模块中的代码就会被执行

pyc文件
  编译后的py文件
  VScode隐藏方式：设置 > files.exclude

__init__.py文件
  当一个包被导入时，__init__.py文件将首先被执行，可在此文件中做包和模块的初始化工作
  批量导入包，在需要用到的模块中，导入有预定义好的__init__.py文件的包，通过包名.即可调用

入口文件
  __name__: __main__
  __package__: None, 入口文件不属于任何包
  __file__: 相对于执行python命令时所在目录的路径
  入口文件不属于任何包，所以和main.py同级的目录为顶级包，相对引入时不能超出顶级包

__name__的经典应用
  if __name__=='__main__':
    pass
  可以让当前模块既可以当作一个普通模块也可以作为一个入口文件

将一个模块当作一个普通模块执行
  python -m parent(文件上级目录).xx.py